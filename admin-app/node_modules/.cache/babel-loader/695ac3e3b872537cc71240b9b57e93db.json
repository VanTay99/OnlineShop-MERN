{"ast":null,"code":"import { categoryContants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategory = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        children: []\n      };\n      myCategories.push({ ...cat,\n        children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategory(category.parentId, state.categories, category); // console.log('update categories', updatedCategories);\n\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n\n    case categoryContants.UPDATE_CATEGORIES_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryContants.UPDATE_CATEGORIES_SUCCESS:\n      state = { ...state,\n        loading: false\n      };\n      break;\n\n    case categoryContants.UPDATE_CATEGORIES_FAILURE:\n      state = { ...state,\n        error: action.payload.error\n      };\n      break;\n\n    case categoryContants.DELETE_CATEGORIES_REQUEST:\n      state = {};\n      break;\n\n    case categoryContants.DELETE_CATEGORIES_REQUEST:\n      state = {};\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/Course IT/OnlineShop-MERN/admin-app/src/reducers/category.reducer.js"],"names":["categoryContants","initState","categories","loading","error","buildNewCategory","parentId","category","myCategories","undefined","_id","name","slug","children","cat","newCategory","push","length","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","ADD_NEW_CATEGORY_FAILURE","UPDATE_CATEGORIES_REQUEST","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAILURE","DELETE_CATEGORIES_REQUEST"],"mappings":"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","sourcesContent":["import { categoryContants } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\nconst buildNewCategory = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if (parentId == undefined) {\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                children: []\r\n\r\n            }\r\n        ];\r\n\r\n    }\r\n    for (let cat of categories) {\r\n\r\n        if (cat._id == parentId) {\r\n            const newCategory = {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                parentId: category.parentId,\r\n                children: []\r\n            };\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\r\n            })\r\n        }\r\n        else {\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n    return myCategories;\r\n\r\n}\r\nexport default (state = initState, action) => {\r\n    switch (action.type) {\r\n        case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategory(category.parentId, state.categories, category);\r\n           // console.log('update categories', updatedCategories);\r\n            state = {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false,\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break;\r\n        case categoryContants.UPDATE_CATEGORIES_REQUEST:\r\n            state={\r\n                ...state,\r\n                loading:true\r\n            }\r\n            break;\r\n        case categoryContants.UPDATE_CATEGORIES_SUCCESS:\r\n            state={\r\n                ...state,\r\n                loading:false\r\n            }\r\n            break;\r\n        case categoryContants.UPDATE_CATEGORIES_FAILURE:\r\n            state={\r\n                ...state,\r\n                error : action.payload.error\r\n            }\r\n            break;\r\n        case categoryContants.DELETE_CATEGORIES_REQUEST:\r\n            state={}\r\n            break;\r\n            case categoryContants.DELETE_CATEGORIES_REQUEST:\r\n                state={}\r\n                break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}