{"ast":null,"code":"import { categoryContants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategory = (parentId, categories, category) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId, [...cat.children, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          children: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategory(category.parentId, state.categories, category);\n      console.log('update categories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/Course IT/OnlineShop-MERN/admin-app/src/reducers/category.reducer.js"],"names":["categoryContants","initState","categories","loading","error","buildNewCategory","parentId","category","myCategories","cat","_id","push","children","length","name","slug","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,EADE;AAEdC,EAAAA,OAAO,EAAE,KAFK;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;;AAKA,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAUJ,UAAV,EAAsBK,QAAtB,KAAmC;AACxD,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,GAAT,IAAgBP,UAAhB,EAA4B;AAExB,QAAGO,GAAG,CAACC,GAAJ,IAASJ,QAAZ,EAAqB;AACjBE,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,gBAAgB,CAACC,QAAD,EAAU,CAAC,GAAGG,GAAG,CAACG,QAAR,EAAiB;AAC3FF,UAAAA,GAAG,EAACH,QAAQ,CAACG,GAD8E;AAE3FI,UAAAA,IAAI,EAACP,QAAQ,CAACO,IAF6E;AAG3FC,UAAAA,IAAI,EAACR,QAAQ,CAACQ,IAH6E;AAI3FT,UAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJwE;AAK3FM,UAAAA,QAAQ,EAAEL,QAAQ,CAACK;AALwE,SAAjB,CAAV,EAMhEL,QANgE,CAA1D,GAMI;AARA,OAAlB;AAUH,KAXD,MAYI;AACAC,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAAEH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAsB,CAAtC,GAA0CR,gBAAgB,CAACC,QAAD,EAAUG,GAAG,CAACG,QAAd,EAAwBL,QAAxB,CAA1D,GAA4F;AAFxF,OAAlB;AAIH;AAEJ;;AACD,SAAOC,YAAP;AAEH,CA3BD;;AA4BA,gBAAe,CAACQ,KAAK,GAAGf,SAAT,EAAoBgB,MAApB,KAA+B;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,gBAAgB,CAACmB,0BAAtB;AACIH,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAAEe,MAAM,CAACG,OAAP,CAAelB;AAFvB,OAAR;AAIA;;AACJ,SAAKF,gBAAgB,CAACqB,wBAAtB;AACIL,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJb,QAAAA,OAAO,EAAE;AAFL,OAAR;AAIA;;AACJ,SAAKH,gBAAgB,CAACsB,wBAAtB;AACI,YAAMf,QAAQ,GAACU,MAAM,CAACG,OAAP,CAAeb,QAA9B;AACA,YAAMgB,iBAAiB,GAAClB,gBAAgB,CAACE,QAAQ,CAACD,QAAV,EAAmBU,KAAK,CAACd,UAAzB,EAAqCK,QAArC,CAAxC;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCF,iBAAhC;AACAP,MAAAA,KAAK,GAAG,EACJ,GAAGA,KADC;AAEJd,QAAAA,UAAU,EAACqB,iBAFP;AAGJpB,QAAAA,OAAO,EAAE;AAHL,OAAR;AAKA;;AACJ,SAAKH,gBAAgB,CAAC0B,wBAAtB;AACIV,MAAAA,KAAK,GAAG,EACJ,GAAGf;AADC,OAAR;AAGA;AA3BR;;AA6BA,SAAOe,KAAP;AACH,CA/BD","sourcesContent":["import { categoryContants } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\nconst buildNewCategory = (parentId,categories, category) => {\r\n    let myCategories = [];\r\n    \r\n    for (let cat of categories) {\r\n        \r\n        if(cat._id==parentId){\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId,[...cat.children,{\r\n                    _id:category._id,\r\n                    name:category.name,\r\n                    slug:category.slug,\r\n                    parentId: category.parentId,\r\n                    children: category.children\r\n                }], category):[]\r\n            });\r\n        }\r\n        else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children && cat.children.length > 0 ? buildNewCategory(parentId,cat.children, category):[]\r\n            });\r\n        }\r\n        \r\n    }\r\n    return myCategories;\r\n\r\n}\r\nexport default (state = initState, action) => {\r\n    switch (action.type) {\r\n        case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category=action.payload.category;\r\n            const updatedCategories=buildNewCategory(category.parentId,state.categories, category);\r\n            console.log('update categories',updatedCategories);\r\n            state = {\r\n                ...state,\r\n                categories:updatedCategories,\r\n                loading: false,\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}