{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { categoryContants } from \"./constants\";\nexport const getAllCategory = () => {\n  return async dispatch => {\n    dispatch({\n      type: categoryContants.GET_ALL_CATEGORIES_REQUEST\n    });\n    const res = await axios.get(`category/getcategory`);\n    console.log(res);\n\n    if (res.status === 200) {\n      const {\n        categoryList\n      } = res.data;\n      dispatch({\n        type: categoryContants.GET_ALL_CATEGORIES_SUCCESS,\n        payload: {\n          categories: categoryList\n        }\n      });\n    } else {\n      dispatch({\n        type: categoryContants.GET_ALL_CATEGORIES_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\nexport const addCategory = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryContants.ADD_NEW_CATEGORY_REQUEST\n    });\n\n    try {} catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const updateCategories = form => {\n  return async dispatch => {\n    const res = await axios.post(`/category/update`, form);\n\n    if (res.status === 201) {\n      return true;\n      console.log(res);\n    } else {\n      console.log(res);\n    }\n  };\n};\nexport const deleteCategories = ids => {\n  return async dispatch => {\n    //dispatch({ type: categoryContants.DELETE_CATEGORIES_REQUEST });\n    const res = await axios.post(`/category/delete`, {\n      payload: {\n        ids\n      }\n    });\n\n    if (res.status == 201) {\n      // dispatch(getAllCategory());\n      // dispatch({ type: categoryContants.DELETE_CATEGORIES_SUCCESS });\n      return true;\n    } else {\n      // const { error } = res.data;\n      // dispatch({\n      //     type: categoryContants.DELETE_CATEGORIES_FAILURE,\n      //     payload: { error }\n      // });\n      return false;\n    }\n  };\n};","map":{"version":3,"sources":["D:/Course IT/OnlineShop-MERN/admin-app/src/actions/category.action.js"],"names":["axios","categoryContants","getAllCategory","dispatch","type","GET_ALL_CATEGORIES_REQUEST","res","get","console","log","status","categoryList","data","GET_ALL_CATEGORIES_SUCCESS","payload","categories","GET_ALL_CATEGORIES_FAILURE","error","addCategory","form","ADD_NEW_CATEGORY_REQUEST","updateCategories","post","deleteCategories","ids"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAO,MAAMC,QAAN,IAAkB;AAErBA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEH,gBAAgB,CAACI;AADlB,KAAD,CAAR;AAGA,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAW,sBAAX,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAIA,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAmBL,GAAG,CAACM,IAA7B;AACAT,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEH,gBAAgB,CAACY,0BADlB;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,UAAU,EAAEJ;AAAd;AAFJ,OAAD,CAAR;AAIH,KAND,MAOK;AACDR,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEH,gBAAgB,CAACe,0BADlB;AAELF,QAAAA,OAAO,EAAE;AAAEG,UAAAA,KAAK,EAAEX,GAAG,CAACM,IAAJ,CAASK;AAAlB;AAFJ,OAAD,CAAR;AAKH;AACJ,GArBD;AAsBH,CAvBM;AAyBP,OAAO,MAAMC,WAAW,GAAEC,IAAD,IAAQ;AAC7B,SAAO,MAAMhB,QAAN,IAAgB;AACnBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH,gBAAgB,CAACmB;AAAvB,KAAD,CAAR;;AACA,QAAI,CAEH,CAFD,CAEE,OAAMH,KAAN,EAAY;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH;AAEJ,GARD;AASH,CAVM;AAYP,OAAO,MAAMI,gBAAgB,GAAEF,IAAD,IAAQ;AAClC,SAAO,MAAMhB,QAAN,IAAgB;AAEnB,UAAMG,GAAG,GAAG,MAAMN,KAAK,CAACsB,IAAN,CAAY,kBAAZ,EAA8BH,IAA9B,CAAlB;;AACD,QAAGb,GAAG,CAACI,MAAJ,KAAa,GAAhB,EAAoB;AAChB,aAAO,IAAP;AACHF,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,KAHD,MAII;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH;AACH,GAVD;AAWH,CAZM;AAeP,OAAO,MAAMiB,gBAAgB,GAAEC,GAAD,IAAO;AACjC,SAAO,MAAMrB,QAAN,IAAkB;AACrB;AACA,UAAMG,GAAG,GAAG,MAAMN,KAAK,CAACsB,IAAN,CAAY,kBAAZ,EAA+B;AAC7CR,MAAAA,OAAO,EAAE;AACLU,QAAAA;AADK;AADoC,KAA/B,CAAlB;;AAKA,QAAIlB,GAAG,CAACI,MAAJ,IAAc,GAAlB,EAAuB;AACnB;AACA;AACA,aAAO,IAAP;AACH,KAJD,MAIO;AACH;AACA;AACA;AACA;AACA;AACA,aAAO,KAAP;AACH;AACJ,GAnBD;AAoBH,CArBM","sourcesContent":["import axios from \"../helpers/axios\"\r\nimport { categoryContants } from \"./constants\";\r\n\r\nexport const getAllCategory = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: categoryContants.GET_ALL_CATEGORIES_REQUEST,\r\n        });\r\n        const res = await axios.get(`category/getcategory`);\r\n        console.log(res);\r\n        if (res.status === 200) {\r\n            const { categoryList } = res.data;\r\n            dispatch({\r\n                type: categoryContants.GET_ALL_CATEGORIES_SUCCESS,\r\n                payload: { categories: categoryList }\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: categoryContants.GET_ALL_CATEGORIES_FAILURE,\r\n                payload: { error: res.data.error }\r\n\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCategory=(form)=>{\r\n    return async dispatch=>{\r\n        dispatch({type:categoryContants.ADD_NEW_CATEGORY_REQUEST});\r\n        try {\r\n\r\n        } catch(error){\r\n            console.log(error);\r\n        }\r\n       \r\n    }\r\n}\r\n\r\nexport const updateCategories=(form)=>{\r\n    return async dispatch=>{\r\n        \r\n        const res = await axios.post(`/category/update`,form);\r\n       if(res.status===201){\r\n           return true;\r\n        console.log(res);\r\n       }\r\n       else{\r\n           console.log(res);\r\n       }\r\n    }\r\n}\r\n\r\n\r\nexport const deleteCategories=(ids)=>{\r\n    return async dispatch => {\r\n        //dispatch({ type: categoryContants.DELETE_CATEGORIES_REQUEST });\r\n        const res = await axios.post(`/category/delete`, {\r\n            payload: {\r\n                ids\r\n            }\r\n        });\r\n        if (res.status == 201) {\r\n            // dispatch(getAllCategory());\r\n            // dispatch({ type: categoryContants.DELETE_CATEGORIES_SUCCESS });\r\n            return true;\r\n        } else {\r\n            // const { error } = res.data;\r\n            // dispatch({\r\n            //     type: categoryContants.DELETE_CATEGORIES_FAILURE,\r\n            //     payload: { error }\r\n            // });\r\n            return false;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}