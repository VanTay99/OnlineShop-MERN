{"ast":null,"code":"import { categoryContants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (id, categories, category) => {\n  let myCategories = [];\n\n  for (let cat of categories) {\n    if (cat.parentId && cat.parentId == id) {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, [...cat.childen, {\n          _id: category._id,\n          name: category.name,\n          slug: category.slug,\n          parentId: category.parentId,\n          childen: category.children\n        }], category) : []\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children && cat.children.length > 0 ? buildNewCategories(id, cat.childen, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updateCategories = buildNewCategories(category._id, state.categories, category);\n      console.log(updateCategories);\n      state = { ...state,\n        categories: updateCategories,\n        loading: false\n      };\n      break;\n\n    case categoryContants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/Course IT/OnlineShop-MERN/admin-app/src/reducers/category.reducer.js"],"names":["categoryContants","initState","categories","loading","error","buildNewCategories","id","category","myCategories","cat","parentId","push","children","length","childen","_id","name","slug","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updateCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,MAAMC,SAAS,GAAC;AACZC,EAAAA,UAAU,EAAC,EADC;AAEZC,EAAAA,OAAO,EAAE,KAFG;AAGZC,EAAAA,KAAK,EAAC;AAHM,CAAhB;;AAMA,MAAMC,kBAAkB,GAAC,CAACC,EAAD,EAAIJ,UAAJ,EAAeK,QAAf,KAA0B;AAC/C,MAAIC,YAAY,GAAC,EAAjB;;AACA,OAAI,IAAIC,GAAR,IAAgBP,UAAhB,EAA2B;AACvB,QAAGO,GAAG,CAACC,QAAJ,IAAcD,GAAG,CAACC,QAAJ,IAAcJ,EAA/B,EAAkC;AAC9BE,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAACH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAoB,CAApC,GAAsCR,kBAAkB,CAACC,EAAD,EAAI,CAAC,GAAGG,GAAG,CAACK,OAAR,EAAgB;AACjFC,UAAAA,GAAG,EAACR,QAAQ,CAACQ,GADoE;AAEjFC,UAAAA,IAAI,EAAET,QAAQ,CAACS,IAFkE;AAGjFC,UAAAA,IAAI,EAAEV,QAAQ,CAACU,IAHkE;AAIjFP,UAAAA,QAAQ,EAACH,QAAQ,CAACG,QAJ+D;AAKjFI,UAAAA,OAAO,EAACP,QAAQ,CAACK;AALgE,SAAhB,CAAJ,EAM9DL,QAN8D,CAAxD,GAMI;AARC,OAAlB;AAUH,KAXD,MAYI;AACAC,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGF,GADW;AAEdG,QAAAA,QAAQ,EAACH,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaC,MAAb,GAAoB,CAApC,GAAsCR,kBAAkB,CAACC,EAAD,EAAIG,GAAG,CAACK,OAAR,EAAgBP,QAAhB,CAAxD,GAAkF;AAF7E,OAAlB;AAIH;AAEJ;;AACD,SAAOC,YAAP;AACH,CAxBD;;AAyBA,gBAAe,CAACU,KAAK,GAACjB,SAAP,EAAiBkB,MAAjB,KAA0B;AACrC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKpB,gBAAgB,CAACqB,0BAAtB;AACIH,MAAAA,KAAK,GAAC,EACF,GAAGA,KADD;AAEFhB,QAAAA,UAAU,EAACiB,MAAM,CAACG,OAAP,CAAepB;AAFxB,OAAN;AAIA;;AACJ,SAAKF,gBAAgB,CAACuB,wBAAtB;AACIL,MAAAA,KAAK,GAAC,EACF,GAAGA,KADD;AAEFf,QAAAA,OAAO,EAAC;AAFN,OAAN;AAIA;;AACJ,SAAKH,gBAAgB,CAACwB,wBAAtB;AACI,YAAMjB,QAAQ,GAACY,MAAM,CAACG,OAAP,CAAef,QAA9B;AACA,YAAMkB,gBAAgB,GAACpB,kBAAkB,CAACE,QAAQ,CAACQ,GAAV,EAAcG,KAAK,CAAChB,UAApB,EAA+BK,QAA/B,CAAzC;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYF,gBAAZ;AACAP,MAAAA,KAAK,GAAC,EACF,GAAGA,KADD;AAEFhB,QAAAA,UAAU,EAAEuB,gBAFV;AAGFtB,QAAAA,OAAO,EAAC;AAHN,OAAN;AAKA;;AACJ,SAAKH,gBAAgB,CAAC4B,wBAAtB;AACIV,MAAAA,KAAK,GAAC,EACF,GAAGjB;AADD,OAAN;AAGA;AA3BR;;AA6BA,SAAOiB,KAAP;AACH,CA/BD","sourcesContent":["import { categoryContants } from \"../actions/constants\";\r\n\r\nconst initState={\r\n    categories:[],\r\n    loading :false,\r\n    error:null\r\n};\r\n\r\nconst buildNewCategories=(id,categories,category)=>{\r\n    let myCategories=[];\r\n    for(let cat of  categories){\r\n        if(cat.parentId&&cat.parentId==id){\r\n            myCategories.push({\r\n                ...cat,\r\n                children:cat.children && cat.children.length>0?buildNewCategories(id,[...cat.childen,{\r\n                    _id:category._id,\r\n                    name: category.name,\r\n                    slug: category.slug,\r\n                    parentId:category.parentId,\r\n                    childen:category.children\r\n                }],category):[]\r\n            });\r\n        }\r\n        else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children:cat.children && cat.children.length>0?buildNewCategories(id,cat.childen,category):[]\r\n            });\r\n        }\r\n       \r\n    }\r\n    return myCategories;\r\n}\r\nexport default (state=initState,action)=>{\r\n    switch(action.type){\r\n        case categoryContants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state={\r\n                ...state,\r\n                categories:action.payload.categories\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_REQUEST:\r\n            state={\r\n                ...state,\r\n                loading:true\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category=action.payload.category;\r\n            const updateCategories=buildNewCategories(category._id,state.categories,category);\r\n            console.log(updateCategories);\r\n            state={\r\n                ...state,\r\n                categories: updateCategories,\r\n                loading:false,\r\n            }\r\n            break;\r\n        case categoryContants.ADD_NEW_CATEGORY_FAILURE:\r\n            state={\r\n                ...initState\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}